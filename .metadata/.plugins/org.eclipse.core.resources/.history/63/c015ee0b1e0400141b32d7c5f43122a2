import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;


public class ImgHist {
	
	private BufferedImage myImg;
	private BufferedImage grayImg;
	private BufferedImage myEqualImg;
	private File imgFile;
	private int[][] imgMatrix;
	private int[] imgHist;
	
	//private methods
	private int[][] genMatrix(BufferedImage image){
		int[][] matrix = new int[image.getWidth()][];
		
		for(int i = 0; i < image.getWidth(); i++){
			matrix[i] = new int[image.getHeight()];
			for(int j = 0; j < image.getHeight(); j++){
				byte p[] = new byte[1];
				image.getRaster().getDataElements(i, j, p);
				matrix[i][j] = ((int) p[0]) & 0xff;
			}
		}
		
		return matrix;
	}

	private int[] genHistogram(int[][] matrix){
		int[] result = new int[256];
		
		//initialize result array
		for(int i = 0; i < 255; i++){
			result[i] = 0;
		}
		
		for(int i = 0; i < matrix.length; i++){
			for(int j = 0; j < matrix[i].length; j++){
				result[matrix[i][j]] = result[matrix[i][j]] + 1;
			}
		}
		return result;
	}
	
	private BufferedImage MyHistoEqal(int[] histogram,int[][] matrix){
		 double[] transformation = new double[256];
		
		//generate CDF * (max-1)
		for(int i = 0; i < histogram.length; i++){
			transformation[i] = ( Math.floor((transformation[i]/255) * (255-1)) );
		}
		
		//apply transformation on the matrix of the image
		for(int i = 0; i < matrix.length; i++){
			for(int j = 0; j < matrix[i].length; j++){
				
				matrix[i][j] =(int) transformation[matrix[i][j]];
			}
		}
		
		//generate new image
		BufferedImage newImage = new BufferedImage(this.grayImg.getWidth(), this.grayImg.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
		for(int i = 0; i < newImage.getWidth(); i++){
			for(int j = 0; j < newImage.getHeight(); j++){
				byte p = new byte;
				p = (byte) matrix[i][j];
				newImage.getRaster().setDataElements(i, j, p);
			}
		}
		
		return newImage;
	}
	
	private BufferedImage makeGray(BufferedImage image){
		BufferedImage grayImage = new BufferedImage(image.getWidth(), image.getHeight(), image.TYPE_BYTE_GRAY);
		Graphics g = grayImage.getGraphics();
		g.drawImage(image, 0, 0, null);
		g.dispose();
		
		return image;
	}
	
	//constructor
	public ImgHist(String fileName) throws IOException{
		this.imgFile = new File(fileName);
		this.myImg = ImageIO.read(imgFile);
		this.grayImg = this.makeGray(this.myImg);
		this.imgMatrix = this.genMatrix(this.grayImg);
		this.imgHist = this.genHistogram(this.imgMatrix);
		this.myEqualImg = this.MyHistoEqal(this.imgHist, this.imgMatrix);
	}
	
	//public methods
	public void printMatrix(){
		//system prints array
		for(int i = 0; i < this.imgMatrix[0].length; i++){
			for(int j = 0; j < this.imgMatrix[1].length; j++){
				System.out.println(this.imgMatrix[i][j]);
			}
		}
	}
	
	
	public void printHistogram(){
		for(int i = 0; i < this.imgHist.length; i++){
			System.out.println("index: " + i + ", " + this.imgHist[i]);
		}
	}
	
	public BufferedImage getEqualImage(){
		return this.myEqualImg;
	}
	
	public BufferedImage getGrayImage(){
		return this.grayImg;
	}
	
	public BufferedImage getOriginalImage(){
		return this.myImg;
	}
	
	public int[][] getMatrix(){
		return this.imgMatrix;
	}
	
	
}
