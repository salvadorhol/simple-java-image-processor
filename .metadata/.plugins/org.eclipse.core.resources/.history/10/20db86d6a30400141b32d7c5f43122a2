
public class Threshold {
	
	public static int[][] optimal(int[][] image){
		
		int[][] t_optimal = null;
		int[][] result = null;
		int[][] temp = null;
		
		//stats
		int zeroCount = 0;
		int oneCount = 0;
		
		//for every threshold
		for(int t = 0; t < 256; t++){
			
			//binarize, store in temp
			System.arraycopy(Threshold.binarize(image, t), 0, temp, 0, image.length);
			
			//count total 1s and 0s
			oneCount = Threshold.countOnes(image);
			zeroCount = Threshold.countZeros(image);
			
		}
		
		
		return t_optimal;
	}
	
	private static int[][] binarize(int[][] image, int t){
		
		for(int i = 0; i < image.length; i++){
			for(int j = 0; j < image[i].length; j++){
				if (image[i][j] > t){
					image[i][j] = 255;
				} else {
					image[i][j] = 0;
				}
			}
		}
		return image;
	}
	
	private static int countOnes(int[][] image){
		int count = 0;
		
		for(int i = 0; i < image.length; i++){
			for(int j = 0; j < image.length; j++){
				if(image[i][j] == 255) count++;
			}
		}
		
		return count;
	}

	private static int countOnes(int[][] image){
		int count = 0;
		
		for(int i = 0; i < image.length; i++){
			for(int j = 0; j < image.length; j++){
				if(image[i][j] == 0) count++;
			}
		}
		
		return count;
	}
}
