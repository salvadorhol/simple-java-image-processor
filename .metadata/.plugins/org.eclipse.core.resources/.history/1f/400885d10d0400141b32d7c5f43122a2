import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;


public class ImgHist {
	
	private BufferedImage myImg;
	private File imgFile;
	private int[][] imgMatrix;
	private int[] imgHist;
	
	private int[][] genMatrix(BufferedImage image){
		BufferedImage grayImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
		//set matrix bounds
		int[][] matrix = new int[grayImage.getWidth()][];
		
		for (int i = 0; i < grayImage.getWidth(); i++){
			matrix[i] = new int[grayImage.getHeight()];
			
			for (int j = 0; j < grayImage.getHeight(); j++){
				//get value at pix i, j and then store it in matrix.
				//Color c = new Color(image.getRGB(i, j));
				byte pix[] = new byte[1];
				grayImage.getRaster().getDataElements(0, 0, pix);
				matrix[i][j] = ((int) pix[0]) & 0xff;
			}
		}
		
		return matrix;
	}
	
	private int[] genHistogram(int[][] matrix){
		int[] result = new int[256];
		
		//initialize result array
		for(int i = 0; i < 255; i++){
			result[i] = 0;
		}
		
		for (int i = 0; i < matrix.length; i++){
			
			for (int j = 0; j < matrix[i].length; j++){
				
				result[matrix[i][j]] = result[matrix[i][j]] + 1;
			}
		}
		
		return result;
	}
	
	//constructor
	public ImgHist(String fileName) throws IOException{
		this.imgFile = new File(fileName);
		this.myImg = ImageIO.read(imgFile);
		this.imgMatrix = this.genMatrix(myImg);
		this.imgHist = this.genHistogram(this.imgMatrix);
	}
	
	public void printMatrix(){
		//system prints array
		for(int i = 0; i < this.imgMatrix[0].length; i++){
			for(int j = 0; j < this.imgMatrix[1].length; j++){
				System.out.println(this.imgMatrix[i][j]);
			}
		}
	}
	
	public void printHistogram(){
		for(int i = 0; i < this.imgHist.length; i++){
			System.out.println("index: " + i + ", " + this.imgHist[i]);
		}
	}
	
	public int[][] getMatrix(){
		return this.imgMatrix;
	}
	
	//
}
